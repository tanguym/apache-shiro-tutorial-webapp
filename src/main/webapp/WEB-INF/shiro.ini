#
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]

shiro.loginUrl = /login.jsp

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

jdbcRealm = be.cegeka.shiro.realm.JdbcCustomizedRealm
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT password FROM shiro_user WHERE username = ?
jdbcRealm.userRolesQuery = select r.name from shiro_role r join shiro_user_role ur on ur.role_id=r.id join shiro_user u on ur.user_id = u.id where u.username = ?
jdbcRealm.permissionsQuery = select p.name from shiro_permission p join shiro_permission_role rp on rp.permission_id=p.id join shiro_role r on r.id = rp.role_id where r.name=?
ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName = localhost
ds.user = root
ds.password = password
ds.databaseName = shiro
jdbcRealm.dataSource = $ds
securityManager.realms = $jdbcRealm

hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 1000
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService
jdbcRealm.credentialsMatcher = $passwordMatcher

[urls]
/login.jsp = authc
/logout = logout
/account/** = authc


